// Generated with ComposableExtensions (0.6.1) https://github.com/jbtule/ComposableExtensions

module Composable.Linq.Enumerable
let inline aggregate source (func:'TSource->'TSource->'TSource) = System.Linq.Enumerable.Aggregate(source, System.Func<'TSource, 'TSource, 'TSource>(func))
let inline all source (predicate:'TSource->System.Boolean) = System.Linq.Enumerable.All(source, System.Func<'TSource, System.Boolean>(predicate))
let inline any source = System.Linq.Enumerable.Any(source)
let inline asEnumerable source = System.Linq.Enumerable.AsEnumerable(source)
let inline cast source = System.Linq.Enumerable.Cast(source)
let inline concat first second = System.Linq.Enumerable.Concat(first, second)
let inline contains source value = System.Linq.Enumerable.Contains(source, value)
let inline count source = System.Linq.Enumerable.Count(source)
let inline defaultIfEmpty source = System.Linq.Enumerable.DefaultIfEmpty(source)
let inline distinct source = System.Linq.Enumerable.Distinct(source)
let inline elementAt source index = System.Linq.Enumerable.ElementAt(source, index)
let inline elementAtOrDefault source index = System.Linq.Enumerable.ElementAtOrDefault(source, index)
let inline except first second = System.Linq.Enumerable.Except(first, second)
let inline first source = System.Linq.Enumerable.First(source)
let inline firstOrDefault source = System.Linq.Enumerable.FirstOrDefault(source)
let inline groupBy source (keySelector:'TSource->'TKey) = System.Linq.Enumerable.GroupBy(source, System.Func<'TSource, 'TKey>(keySelector))
let inline groupJoin outer inner (outerKeySelector:'TOuter->'TKey) (innerKeySelector:'TInner->'TKey) (resultSelector:'TOuter->System.Collections.Generic.IEnumerable<'TInner>->'TResult) = System.Linq.Enumerable.GroupJoin(outer, inner, System.Func<'TOuter, 'TKey>(outerKeySelector), System.Func<'TInner, 'TKey>(innerKeySelector), System.Func<'TOuter, System.Collections.Generic.IEnumerable<'TInner>, 'TResult>(resultSelector))
let inline intersect first second = System.Linq.Enumerable.Intersect(first, second)
let inline join outer inner (outerKeySelector:'TOuter->'TKey) (innerKeySelector:'TInner->'TKey) (resultSelector:'TOuter->'TInner->'TResult) = System.Linq.Enumerable.Join(outer, inner, System.Func<'TOuter, 'TKey>(outerKeySelector), System.Func<'TInner, 'TKey>(innerKeySelector), System.Func<'TOuter, 'TInner, 'TResult>(resultSelector))
let inline last source = System.Linq.Enumerable.Last(source)
let inline lastOrDefault source = System.Linq.Enumerable.LastOrDefault(source)
let inline longCount source = System.Linq.Enumerable.LongCount(source)
let inline ofType source = System.Linq.Enumerable.OfType(source)
let inline orderBy source (keySelector:'TSource->'TKey) = System.Linq.Enumerable.OrderBy(source, System.Func<'TSource, 'TKey>(keySelector))
let inline orderByDescending source (keySelector:'TSource->'TKey) = System.Linq.Enumerable.OrderByDescending(source, System.Func<'TSource, 'TKey>(keySelector))
let inline reverse source = System.Linq.Enumerable.Reverse(source)
let inline sequenceEqual first second = System.Linq.Enumerable.SequenceEqual(first, second)
let inline single source = System.Linq.Enumerable.Single(source)
let inline singleOrDefault source = System.Linq.Enumerable.SingleOrDefault(source)
let inline skip source count = System.Linq.Enumerable.Skip(source, count)
let inline take source count = System.Linq.Enumerable.Take(source, count)
let inline thenBy source (keySelector:'TSource->'TKey) = System.Linq.Enumerable.ThenBy(source, System.Func<'TSource, 'TKey>(keySelector))
let inline thenByDescending source (keySelector:'TSource->'TKey) = System.Linq.Enumerable.ThenByDescending(source, System.Func<'TSource, 'TKey>(keySelector))
let inline toArray source = System.Linq.Enumerable.ToArray(source)
let inline toDictionary source (keySelector:'TSource->'TKey) = System.Linq.Enumerable.ToDictionary(source, System.Func<'TSource, 'TKey>(keySelector))
let inline toList source = System.Linq.Enumerable.ToList(source)
let inline toLookup source (keySelector:'TSource->'TKey) = System.Linq.Enumerable.ToLookup(source, System.Func<'TSource, 'TKey>(keySelector))
let inline union first second = System.Linq.Enumerable.Union(first, second)
let inline zip first second (resultSelector:'TFirst->'TSecond->'TResult) = System.Linq.Enumerable.Zip(first, second, System.Func<'TFirst, 'TSecond, 'TResult>(resultSelector))

module Full =
    let inline aggregate source seed (func:'TAccumulate->'TSource->'TAccumulate) (resultSelector:'TAccumulate->'TResult) = System.Linq.Enumerable.Aggregate(source, seed, System.Func<'TAccumulate, 'TSource, 'TAccumulate>(func), System.Func<'TAccumulate, 'TResult>(resultSelector))
    let inline any source (predicate:'TSource->System.Boolean) = System.Linq.Enumerable.Any(source, System.Func<'TSource, System.Boolean>(predicate))
    let inline contains source value comparer = System.Linq.Enumerable.Contains(source, value, comparer)
    let inline count source (predicate:'TSource->System.Boolean) = System.Linq.Enumerable.Count(source, System.Func<'TSource, System.Boolean>(predicate))
    let inline defaultIfEmpty source defaultValue = System.Linq.Enumerable.DefaultIfEmpty(source, defaultValue)
    let inline distinct source comparer = System.Linq.Enumerable.Distinct(source, comparer)
    let inline except first second comparer = System.Linq.Enumerable.Except(first, second, comparer)
    let inline first source (predicate:'TSource->System.Boolean) = System.Linq.Enumerable.First(source, System.Func<'TSource, System.Boolean>(predicate))
    let inline firstOrDefault source (predicate:'TSource->System.Boolean) = System.Linq.Enumerable.FirstOrDefault(source, System.Func<'TSource, System.Boolean>(predicate))
    let inline groupBy source (keySelector:'TSource->'TKey) (elementSelector:'TSource->'TElement) (resultSelector:'TKey->System.Collections.Generic.IEnumerable<'TElement>->'TResult) comparer = System.Linq.Enumerable.GroupBy(source, System.Func<'TSource, 'TKey>(keySelector), System.Func<'TSource, 'TElement>(elementSelector), System.Func<'TKey, System.Collections.Generic.IEnumerable<'TElement>, 'TResult>(resultSelector), comparer)
    let inline groupJoin outer inner (outerKeySelector:'TOuter->'TKey) (innerKeySelector:'TInner->'TKey) (resultSelector:'TOuter->System.Collections.Generic.IEnumerable<'TInner>->'TResult) comparer = System.Linq.Enumerable.GroupJoin(outer, inner, System.Func<'TOuter, 'TKey>(outerKeySelector), System.Func<'TInner, 'TKey>(innerKeySelector), System.Func<'TOuter, System.Collections.Generic.IEnumerable<'TInner>, 'TResult>(resultSelector), comparer)
    let inline intersect first second comparer = System.Linq.Enumerable.Intersect(first, second, comparer)
    let inline join outer inner (outerKeySelector:'TOuter->'TKey) (innerKeySelector:'TInner->'TKey) (resultSelector:'TOuter->'TInner->'TResult) comparer = System.Linq.Enumerable.Join(outer, inner, System.Func<'TOuter, 'TKey>(outerKeySelector), System.Func<'TInner, 'TKey>(innerKeySelector), System.Func<'TOuter, 'TInner, 'TResult>(resultSelector), comparer)
    let inline last source (predicate:'TSource->System.Boolean) = System.Linq.Enumerable.Last(source, System.Func<'TSource, System.Boolean>(predicate))
    let inline lastOrDefault source (predicate:'TSource->System.Boolean) = System.Linq.Enumerable.LastOrDefault(source, System.Func<'TSource, System.Boolean>(predicate))
    let inline longCount source (predicate:'TSource->System.Boolean) = System.Linq.Enumerable.LongCount(source, System.Func<'TSource, System.Boolean>(predicate))
    let inline orderBy source (keySelector:'TSource->'TKey) comparer = System.Linq.Enumerable.OrderBy(source, System.Func<'TSource, 'TKey>(keySelector), comparer)
    let inline orderByDescending source (keySelector:'TSource->'TKey) comparer = System.Linq.Enumerable.OrderByDescending(source, System.Func<'TSource, 'TKey>(keySelector), comparer)
    let inline sequenceEqual first second comparer = System.Linq.Enumerable.SequenceEqual(first, second, comparer)
    let inline single source (predicate:'TSource->System.Boolean) = System.Linq.Enumerable.Single(source, System.Func<'TSource, System.Boolean>(predicate))
    let inline singleOrDefault source (predicate:'TSource->System.Boolean) = System.Linq.Enumerable.SingleOrDefault(source, System.Func<'TSource, System.Boolean>(predicate))
    let inline thenBy source (keySelector:'TSource->'TKey) comparer = System.Linq.Enumerable.ThenBy(source, System.Func<'TSource, 'TKey>(keySelector), comparer)
    let inline thenByDescending source (keySelector:'TSource->'TKey) comparer = System.Linq.Enumerable.ThenByDescending(source, System.Func<'TSource, 'TKey>(keySelector), comparer)
    let inline toDictionary source (keySelector:'TSource->'TKey) (elementSelector:'TSource->'TElement) comparer = System.Linq.Enumerable.ToDictionary(source, System.Func<'TSource, 'TKey>(keySelector), System.Func<'TSource, 'TElement>(elementSelector), comparer)
    let inline toLookup source (keySelector:'TSource->'TKey) (elementSelector:'TSource->'TElement) comparer = System.Linq.Enumerable.ToLookup(source, System.Func<'TSource, 'TKey>(keySelector), System.Func<'TSource, 'TElement>(elementSelector), comparer)
    let inline union first second comparer = System.Linq.Enumerable.Union(first, second, comparer)
